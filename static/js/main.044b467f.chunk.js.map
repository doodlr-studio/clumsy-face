{"version":3,"sources":["components/Carousel/Carousel.tsx","hooks/store.context.ts","App.tsx","hooks/store.hook.ts","serviceWorker.ts","index.tsx"],"names":["DIRECTION","Carousel","containerWidth","elementWidth","children","ref","useRef","useState","className","STORE_DEFAULT_VALUE","store","selectedIndex","body","hair","setCurrentStore","storeContext","createContext","App","setStore","useCallback","currentStore","useStore","Provider","value","style","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GASKA,E,+DAAAA,O,eAAAA,I,gBAAAA,M,KAKL,IAmBeC,EAnBuB,SAAC,GAIjC,EAHJC,eAGI,EAFJC,aAEK,IADLC,EACI,EADJA,SAEMC,EAAMC,iBAAuB,MAD/B,EAEsBC,mBAAiB,GAFvC,6BAIJ,OACE,qBAAKC,UAAU,qBAAqBH,IAAKA,EAAzC,SACE,qBACEG,UAAU,WADZ,SAGGJ,OCdIK,EAAsB,CACjCC,MAAO,CACLL,IAAK,KACLM,cAAe,CACbC,KAAM,EACNC,KAAM,IAGVC,gBAAiB,cAGNC,EAAeC,wBAA4BP,GCsBzCQ,EAxCO,WACpB,IAAMP,ECJgB,WAAqB,IAAD,EAChBH,mBAAgB,CACxCF,IAAK,KACLM,cAAe,CACbC,KAAM,EACNC,KAAM,KALgC,mBACnCH,EADmC,KAC5BQ,EAD4B,KAa1C,MAAO,CACLR,QACAI,gBANsBK,uBAAY,SAACC,GACnCF,EAASE,KACR,KDPWC,GAEd,OACE,+BACE,cAACN,EAAaO,SAAd,CAAuBC,MAAOb,EAA9B,SAIE,eAAC,EAAD,CAAUR,eAAgB,IAAKC,aAAc,IAA7C,UACE,oBAAYqB,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,GAGT,oBAAYD,MAAO,CAAEC,MAAO,KAA5B,cAAS,WEzBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.044b467f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './Carousel.scss';\n\ninterface ICarousel {\n  containerWidth: number;\n  elementWidth: number;\n  children?: React.ReactNode;\n}\n\nenum DIRECTION {\n  PREV,\n  NEXT,\n}\n\nconst Carousel: React.FC<ICarousel> = ({\n  containerWidth: cw,\n  elementWidth: ew,\n  children,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [index, setIndex] = useState<number>(0);\n\n  return (\n    <div className=\"carousel-container\" ref={ref}>\n      <div\n        className=\"carousel\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { createContext, RefObject } from 'react';\nimport { CharacterPropertyIndex } from '../classes/Character';\n\nexport interface Store {\n  ref: RefObject<SVGSVGElement> | null;\n  selectedIndex: CharacterPropertyIndex;\n}\n\nexport interface StoreContext {\n  store: Store;\n  setCurrentStore: (currentStore: Store) => void;\n}\n\nexport const STORE_DEFAULT_VALUE = {\n  store: {\n    ref: null,\n    selectedIndex: {\n      body: 0,\n      hair: 0,\n    },\n  },\n  setCurrentStore: () => {},\n};\n\nexport const storeContext = createContext<StoreContext>(STORE_DEFAULT_VALUE);\n","import React from 'react';\nimport { Canvas, Controller, Panel } from 'components';\nimport { Carousel } from 'components/Carousel';\nimport { storeContext } from './hooks/store.context';\nimport { useStore } from './hooks/store.hook';\n\nconst App: React.FC = () => {\n  const store = useStore();\n\n  return (\n    <main>\n      <storeContext.Provider value={store}>\n        {/* <Canvas />\n        <Panel />\n        <Controller /> */}\n        <Carousel containerWidth={400} elementWidth={200}>\n          <li key={1} style={{ width: 200 }}>\n            1\n          </li>\n          <li key={2} style={{ width: 200 }}>\n            2\n          </li>\n          <li key={3} style={{ width: 200 }}>\n            3\n          </li>\n          <li key={4} style={{ width: 200 }}>\n            4\n          </li>\n          <li key={5} style={{ width: 200 }}>\n            5\n          </li>\n          <li key={6} style={{ width: 200 }}>\n            6\n          </li>\n          <li key={7} style={{ width: 200 }}>\n            7\n          </li>\n          <li key={8} style={{ width: 200 }}>\n            8\n          </li>\n        </Carousel>\n      </storeContext.Provider>\n    </main>\n  );\n};\n\nexport default App;\n","import { Store, StoreContext } from './store.context';\nimport { useCallback, useState } from 'react';\n\nexport const useStore = (): StoreContext => {\n  const [store, setStore] = useState<Store>({\n    ref: null,\n    selectedIndex: {\n      body: 0,\n      hair: 0,\n    },\n  });\n\n  const setCurrentStore = useCallback((currentStore: Store): void => {\n    setStore(currentStore);\n  }, []);\n\n  return {\n    store,\n    setCurrentStore,\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}