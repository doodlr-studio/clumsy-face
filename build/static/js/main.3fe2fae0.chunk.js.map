{"version":3,"sources":["components/Canvas.tsx","hooks/useCanvas.ts","components/PanelItem.tsx","components/Panel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Canvas","useRef","ref","useEffect","canvas","current","ctx","getContext","beginPath","arc","Math","PI","fill","style","width","height","PanelItem","category","Panel","App","css","styles","body","margin","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAuCeA,EAlCU,WAAO,IAAD,ECDtB,CADWC,iBAA0B,ODGrCC,EADsB,oBA0B7B,OAZAC,qBAAU,WACR,IAAMC,EAASF,EAAIG,QACnB,GAAID,EAAQ,CACV,IAAME,EAAMF,EAAOG,WAAW,MAC1BD,IACFA,EAAIE,YACJF,EAAIG,IAAI,GAAI,GAAI,GAAI,EAAG,EAAIC,KAAKC,IAChCL,EAAIM,YAMR,8BACA,sBAAQV,IAAKA,EAAKW,MAAO,CAAEC,MAAO,IAAKC,OAAQ,SEvBpCC,EAJ6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7C,OAAO,4BAAKA,ICICC,EARS,WACtB,OAAO,oCACP,kBAAC,EAAD,CAAWD,SAAS,SACpB,kBAAC,EAAD,CAAWA,SAAS,SACpB,kBAAC,EAAD,CAAWA,SAAS,Y,qGCHtB,IAqBeE,EArBO,WACpB,OACE,oBACEC,IAAKA,YAAF,MAIH,YAAC,IAAD,CACEC,OAAQ,CACNC,KAAM,CACJC,OAAQ,EACRC,QAAS,MAIf,YAAC,EAAD,MACA,YAAC,EAAD,QCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3fe2fae0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useCanvas } from \"hooks\";\n/** @jsx jsx */ import { jsx, css } from \"@emotion/core\";\n\n\nconst Canvas: React.FC = () => {\n  const [ref] = useCanvas();\n\n  const handleClick = () => {\n    const imageDataUrl: string = ref.current!.toDataURL(\"image/png\");\n\n    const link: HTMLAnchorElement = document.createElement('a');\n    link.download = \"doodlr.png\";\n    link.href = imageDataUrl;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  useEffect(() => {\n    const canvas = ref.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        ctx.beginPath();\n        ctx.arc(50, 50, 50, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    }\n  });\n\n  return (\n    <>\n    <canvas ref={ref} style={{ width: 500, height: 500 }} />\n    {/* <button onClick={handleClick}>to image</button> */}\n    </>\n  );\n};\n\nexport default Canvas;\n","import { useRef } from \"react\";\n\nexport default () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  return [canvasRef];\n};\n","import React from \"react\";\ninterface PanelItemProps {\n  category: string;\n  //previews: Preview[];\n}\n\nconst PanelItem: React.FC<PanelItemProps> = ({ category }) => {\n  return <h1>{category}</h1>;\n};\n\nexport default PanelItem;\n","import React from \"react\";\nimport PanelItem from \"./PanelItem\";\n\nconst Panel: React.FC = () => {\n  return <>\n  <PanelItem category=\"EYES\"></PanelItem>\n  <PanelItem category=\"NOSE\"></PanelItem>\n  <PanelItem category=\"MOUSE\"></PanelItem>\n  </>;\n};\n\nexport default Panel;\n","import React from \"react\";\nimport { Canvas, Panel, Button } from \"components\";\n/** @jsx jsx */ import { jsx, css, Global } from \"@emotion/core\";\n\nconst App: React.FC = () => {\n  return (\n    <main\n      css={css`\n        height: 400px;\n      `}\n    >\n      <Global\n        styles={{\n          body: {\n            margin: 0,\n            padding: 0,\n          },\n        }}\n      />\n      <Canvas />\n      <Panel />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}